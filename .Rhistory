result
}
x <- df_freq_tables(mpg, c("model", "year"))
data(mpg, package = "ggplot2")
x <- df_freq_tables(mpg, c("model", "year"))
class(x)
df_freq_tables(mpg)
df_freq_tables(mpg, "a")
df_freq_tables(mpg, "cyl")
df_freq_tables(mpg, c("cyl",a))
df_freq_tables(mpg, c("cyl","a"))
count_occurences <- function(data, var, val){
count = 0
for(row in 1:nrow(data)){
if(data[row,var] == val){
count = count + 1
}
}
count
}
# This function takes a data frame and a variable name and
# returns the number of NA values in that variable's column.
count_nas <- function(data, var){
count = 0
for(row in 1:nrow(data)){
if(is.na(data[row,var])){
count = count + 1
}
}
count
}
# This function takes a data frame and a variable name and
# returns a frequency table for that variable.
create_table <- function(data, var, na.rm){
# initialize frequency table columns
val_vec <- c()
count_vec <- c()
prop_vec <- c()
# get NA statistics
if(!na.rm){
na_count <- count_nas(data, var)
store_length <- nrow(data)
na_prop = round(na_count / store_length,2)
}
# remove NA values
data <- data[!is.na(data[[var]]),]
# handle NA values if removed
if(na.rm){
store_length <- nrow(data)
na_count = 0
}
# get variable statistics
for(row in 1:nrow(data)){
val = data[row,var]
if(is.element(val, val_vec)){
next
} else{
count = count_occurences(data, var, val)
prop = round(count / store_length,2)
val_vec <- c(val_vec, val)
count_vec <- c(count_vec, count)
prop_vec <- c(prop_vec, prop)
}
}
# create and sort data frame
df <- data.frame(value = val_vec,
count = count_vec,
proportion = prop_vec)
df <- df[order(df$value),]
# add NA row
if(!na.rm & na_count > 0){
df <- rbind(df,data.frame(value = NA,
count = na_count,
proportion = na_prop))
}
# rename rows
rownames(df) <- 1:nrow(df)
df
}
# Main function:
# This function takes a data frame and a charcter vector of variable names and
# returns a frequency table for each variable listed in the vector.
df_freq_tables <- function(data, vars = colnames(data), na.rm = TRUE){
# check for bad inputs
if(!is.data.frame(data)){
stop("'data' must be a data frame", call. = FALSE)
}
if(!is.character(vars)){
stop("'vars' must be a character vector", call. = FALSE)
}
# create list of frequency tables
result <- list()
for (var in vars){
if(is.element(var, colnames(data))){
result[[var]] <- create_table(data, var, na.rm)
}else{
stop(paste("'", var, "'",
"is not a variable in the data frame"),
call. = FALSE)
}
}
result
}
df_freq_tables(mtcars)
name <- readline("What is your name?")
name <- readline("What is your name?")
name <- readline("What is your name?")
name <- readline("What is your name? ")
age <- as.integer(readline("How old are you? "))
Library <- function(pkg){
if (pkg %in% rownames(installed.packages())){
library(pkg)
}else{
stop("Package not installed")
}
}
Library(dplyr)
Library("dplyr")
Library <- function(pkg){
if (pkg %in% installed.packages()){
library(pkg)
}else{
stop("Package not installed")
}
}
Library("dplyr")
library("dplyr")
Library <- function(pkg){
if (pkg %in% rownames(installed.packages())){
library(as.name(pkg))
}else{
stop("Package not installed")
}
}
Library("dplyr")
Library <- function(pkg){
if (pkg %in% rownames(installed.packages())){
library(as.character(pkg))
}else{
stop("Package not installed")
}
}
Library("dplyr")
Library <- function(pkg){
if (pkg %in% rownames(installed.packages())){
library(pkg)
}else{
stop("Package not installed")
}
}
Library("dplyr")
Library("afsdjf")
Library <- function(pkg){
if(!require(pkg)){
msg <- paste("Install package", pkg, "(y/n)? ")
answer <- readline(msg)
}
}
Library("afsdjf")
Library <- function(pkg){
if(!require(pkg)){
msg <- paste("Install package", pkg, "(y/n)? ")
answer <- readline(msg)
if(answer == "y"){
install.packages(pkg)
}else{
msg <- paste("The program requires", pkg)
stop(msg)
}
}
}
Library("B2Z")
Library <- function(pkg){
if(!require(pkg)){
msg <- paste("Install package", pkg, "(y/n)? ")
answer <- readline(msg)
if(tolower(answer) == "y"){
install.packages(pkg)
}else{
msg <- paste("The program requires", pkg)
stop(msg)
}
}
}
Library("dplyr")
Library("B2Z")
remove.packages("B2Z")
Library("B2Z")
Library <- function(pkg){
if(!require(pkg, character.only = TRUE)){
msg <- paste("Install package", pkg, "(y/n)? ")
answer <- readline(msg)
if(tolower(answer) == "y"){
install.packages(pkg)
require(pkg, character.only = TRUE)
}else{
msg <- paste("The program requires", pkg)
stop(msg)
}
}
}
remove.packages("B2Z")
Library("B2Z")
?require
search()
library(B2Z)
remove.packages("B2Z")
search()
summary(women)
fit <- lm(weight ~ height, women)
summary(fit)
class(women)
class(fit)
summary
methods(summary)
summary.data.frame()
summary.data.frame
summary.lm
summary(gk)
summary.default
summary.aspell
getAnywhere(summary.aspell)
x <- 1:5
class(x) <- "a"
mymethod <- function(x, ...){
UseMethod("mymethod")
}
mymethod.a <- function(x) print("Using A")
mymethod.b <- function(x) print("Using B")
mymethod.default <- function(x) print ("Using Default")
x <- 1:5
class(x) <- "a"
mymethod <- function(x, ...){
UseMethod("mymethod")
}
mymethod.a <- function(x) print("Using A")
mymethod.b <- function(x) print("Using B")
mymethod.default <- function(x) print ("Using Default")
x <- 1:5
class(x) <- "a"
mymethod(a)
y <- 6:10
class(y) <- "b"
z <- 10:15
mymethod(a)
mymethod(x)
mymethod(y)
mymethod(z)
mymethod.a <- function(x) print("Using A")
mymethod.b <- function(x) print("Using B")
mymethod.default <- function(x) print ("Using Default")
x <- 1:5
class(x) <- "a"
y <- 6:10
class(y) <- "b"
z <- 11:16
mymethod(z)
mymethod(z)
mymethod(x)
mymethod <- function(x, ...){
UseMethod("mymethod")
}
mymethod.a <- function(x) print("Using A")
mymethod.b <- function(x) print("Using B")
mymethod.default <- function(x) print ("Using Default")
x <- 1:5
class(x) <- "a"
y <- 6:10
class(y) <- "b"
z <- 11:16
mymethod(x)
mymethod(x)
mymethod(y)
mymethod(z)
class(z) <- c("a", "b")
class(z) <- c("c","a","b")
mymethod(z)
class(z) <- c("a", "b")
mymethod(z)
women
class(women)
class(women) <- "lm"
summary(women)
data(mpg)
data(mpg, package = "gpglot2")
data(mpg, package = "ggplot2")
head(mpg)
aggregate(mpg$hwy, list(mpg$class), mean)
boxplot(hwy ~ class, data = mpg)
oneway <- function(formula, data){
# listwise deletion of missing values
data_complete <- na.omit(data)
# ANOVA
fit <- lm(formula, data_complete)
# summary statistics
stats <- aggregate(formula,
data,
function(x) c(mean = mean(x), sd = sd(x))
)
result <- list(anova = fit, summarystats = stats)
class(result) <- c("oneway", "list")
return(result)
}
plot.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
boxplot(x$anova$terms, x$anova$model, col=  "skyblue", ...)
}
# try it out
data(mpg, package = "ggplot2")
mileage <- oneway(hwy ~ class, mpg)
plot(mileage)
View(mileage)
plot(mileage, border = "orange")
plot(mileage, border = "royalblue")
plot.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
boxplot(x$anova$terms, x$anova$model, col=  "orange", ...)
}
plot(mileage, border = "royalblue")
plot(mileage, border = "blue")
plot(mileage, border = "royalblue")
plot(mileage, border = "blue")
# print function
summary.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
print(anova(x$anova))
}
summary(mileage)
summary.oneway(mileage)
# print function
print.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
}
# print function
print.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
cat("Summary Statistics\n",
"====================================\n", sep = "")
print(summary.lm(x$summarystats))
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
}
print.oneway(mileage)
# print function
print.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
cat("Summary Statistics\n",
"====================================\n", sep = "")
print(summary.lm(x$summarystats))
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
}
print(mileage)
oneway <- function(formula, data){
# listwise deletion of missing values
data_complete <- na.omit(data)
# ANOVA
fit <- lm(formula, data_complete)
# summary statistics
stats <- aggregate(formula,
data,
function(x) c(mean = mean(x), sd = sd(x))
)
result <- list(anova = fit, summarystats = stats)
class(result) <- c("oneway", "list")
return(result)
}
plot.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
boxplot(x$anova$terms, x$anova$model, col=  "orange", ...)
}
# print function
print.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
cat("Summary Statistics\n",
"====================================\n", sep = "")
print(summary.lm(x$summarystats))
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
}
# summary function
summary.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
print(anova(x$anova))
}
# try it out
data(mpg, package = "ggplot2")
mileage <- oneway(hwy ~ class, mpg)
plot(mileage, border = "blue")
summary(mileage)
print(mileage)
# print function
print.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
cat("Summary Statistics\n",
"====================================\n", sep = "")
print(summary.lm(x$stats))
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
}
print(mileage)
# print function
print.oneway <- function(x, ...){
if(!inherits(x, "oneway")) stop("Must be class 'oneway'")
cat("Summary Statistics\n",
"====================================\n", sep = "")
print(summary.lm(x$summarystats))
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
}
print(mileage)
setwd("~/2018-2019/Adv R/oneway")
library(oneway)
?oneway
example("oneway")
?plot.oneway
library(oneway)
help(cars)
?oneway
spell_check()
library(devtools)
spell_check()
mydata <- c(2,5,3,9,10,16,3,4,5.5,7)
# calculate a 95% confidence interval assuming normality
t.test(mydata)
n <- length(mydata)
Mean <- mean(mydata)
# take a random sample with replacement
sample(mydata, n, replace = TRUE)
# take a random sample with replacement
sample(mydata, n, replace = TRUE)
# take a random sample with replacement and get the mean
mean(sample(mydata, n, replace = TRUE))
# take a random sample with replacement and get the mean
mean(sample(mydata, n, replace = TRUE))
# take a random sample with replacement and get the mean
mean(sample(mydata, n, replace = TRUE))
# take a random sample with replacement and get the mean
mean(sample(mydata, n, replace = TRUE))
sampleMeans <- vector(mode = "numeric", k)
# do this 1000 times
k = 1000
sampleMeans <- vector(mode = "numeric", k)
for(i in 1:k){
sampleMeans[i] <- mean(sample(mydata, n, replace = TRUE))
}
mean(sampleMeans)
hist(sampleMeans)
hist(sampleMeans, break = 20)
hist(sampleMeans, breaks = 20)
hist(sampleMeans, breaks = 20)
# bias
bias <- sum(sampleMeans - Mean)/k
# bias corrected estimate
est <- Mean - bias
abline(v = est, lty = 2, col = "blue")
# sort vector of means
sampleMeans <- sampleMeans[order(sampleMeans)]
# 95% confidence interval
# the number that cuts off the bottom 2.5% (1000*.025 is the 25th number)
# tht cuts off the top 97.5% (1000*.975 is the 975th number)
CI <- sampleMeans[c(round(0.25*k),round(0.975*k))]
.95^17
abline(v = CI, col = "red")
library(boot)
# bootstrap a statistic
mydata <- c(2,5,3,9,10,16,3,4,5.5,7)
Mean <- function(data, indices){
d <- data[indices]
mean(d)
}
set.seed(1234)
results <- boot(data = mydata, statistic = Mean, R = 1000)
print(results)
boot.ci(results, type = "perc", "bca")
boot.ci(results, type = "perc")
boot.ci(results, type = c("perc","bca"))
bs <- function(formula, data, indices){
d <- data[indices, ]
fit <- lm(formula, data = d)
return(coef(fit))
}
set.seed(1234)
results <- boot(data = mtcars, statistic = bs, R = 10000,
formula = mpg ~ wt + disp)
print(results, index = 2)
boot.ci(results, type = "bca", index = 2)
plot(results, index = 2)
library(oneway)
library(oneway)
?oneway
library(ggplot2)
cars <- mpg[c("hwy", "class", "year")]
save(cars, file = "data/cars.rda", compress = "xz")
library(devtools)
use_vignette("introduction_to_oneway")
library(oneway)
build_site()
build_site
library(pkgdown)
install.packages("pkgdown")
library(pkgdown)
build_site()
build_site()
